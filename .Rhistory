macd$date <- row.names(macd)
return(macd)
}
macd <- calculateMacd(x)
library(plotly)
fig <- plot_ly(macd, x = ~date, y = ~macd,
name = "MACD",
type = "bar"
)
macd
macd <- calculateMacd(timeSeries)
macd
timeSeries
macd <- calculateMacd(timeSeries)
macd
x <- merge.data.frame(timeSeries$Date, timeSeries$Close)
colnames(x) <- c("Date", "Close")
calculateMacd <- function(timeSeries) {
macd <- MACD(timeSeries$Close)
macd <- as.data.frame(macd)
macd$date <- row.names(timeSeries$Date)
return(macd)
}
macd <- calculateMacd(x)
macd
calculateMacd <- function(timeSeries) {
macd <- MACD(timeSeries$Close)
macd <- as.data.frame(macd)
macd$date <- timeSeries$Date
return(macd)
}
macd <- calculateMacd(x)
macd
library(plotly)
fig <- plot_ly(macd, x = ~date, y = ~macd,
name = "MACD",
type = "bar"
)
fig <- fig %>% add_trace(y = ~signal, name = 'Signal')
fig
library(dplyr)
library(lubridate)
set.seed(2017)
options(digits=4)
(expenses <- data_frame(
date=seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by=1),
amount=rgamma(length(date), shape = 2, scale = 20)))
expenses %>% group_by(month=floor_date(date, "month")) %>%
summarize(amount=sum(amount))
library(quantmod)
getTimeSeries <- function(symbol) {
library(quantmod)
timeSeries <- getSymbols(symbol, src = "yahoo", from = (Sys.Date() - 700),
to = Sys.Date(),
auto.assign = FALSE)
colnames(timeSeries) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
return(timeSeries)
}
timeSeries <- getTimeSeries("0P000125KV.L")
timeSeries <- as.data.frame(timeSeries)
timeSeries$Date <- rownames(timeSeries)
timeSeries
library(dplyr)
library(lubridate)
x <- merge.data.frame(timeSeries$Date, timeSeries$Close)
colnames(x) <- c("Date", "Close")
typeof(x$Date)
typeof(x$Date[1])
x[['Date']]
x[['Date']] <- strptime(x[['Date']], format='%Y.%m.%d  %H:%M:%S')
x[['Date']]
x <- merge.data.frame(timeSeries$Date, timeSeries$Close)
colnames(x) <- c("Date", "Close")
x[['Date']]
x[['Date']] <- as.Date(x[['Date']])
x[['Date']]
typeof(x[['Date']])
x %>% group_by(month=floor_date(Date, "month")) %>%
summarize(amount=sum(Close))
x <- merge.data.frame(timeSeries$Date, timeSeries$Close)
colnames(x) <- c("Date", "Close")
x[['Date']] <- as.Date(x[['Date']])
x %>% group_by(Date=floor_date(Date, "month")) %>%
summarize(Close=sum(Close))
x <- merge.data.frame(timeSeries$Date, timeSeries$Close)
colnames(x) <- c("Date", "Close")
x[['Date']] <- as.Date(x[['Date']])
x %>% group_by(Date=floor_date(Date, "month")) %>%
summarize(Close=mean(Close))
x <- merge.data.frame(timeSeries$Date, timeSeries$Close)
colnames(x) <- c("Date", "Close")
x[['Date']] <- as.Date(x[['Date']])
x %>% group_by(Date=floor_date(Date, "month")) %>%
summarize(Close=max(Close))
x %>% group_by(Date=floor_date(Date, "month")) %>%
summarize(Close=sum(Close))
x <- merge.data.frame(timeSeries$Date, timeSeries$Close)
colnames(x) <- c("Date", "Close")
x[['Date']] <- as.Date(x[['Date']])
x %>% group_by(Date=floor_date(Date, "month")) %>%
summarize(Close=mean(Close))
x <- merge.data.frame(timeSeries$Date, timeSeries$Close)
colnames(x) <- c("Date", "Close")
x[['Date']] <- as.Date(x[['Date']])
x %>% group_by(Date=floor_date(Date, "month")) %>%
summarize(Close=median(Close))
x <- merge.data.frame(timeSeries$Date, timeSeries$Close)
colnames(x) <- c("Date", "Close")
x[['Date']] <- as.Date(x[['Date']])
x %>% group_by(Date=floor_date(Date, "month")) %>%
summarize(Close=first(Close))
x <- merge.data.frame(timeSeries$Date, timeSeries$Close)
colnames(x) <- c("Date", "Close")
x[['Date']] <- as.Date(x[['Date']])
x %>% group_by(Date=floor_date(Date, "month")) %>%
summarize(Close=mean(Close), n = n())
x <- merge.data.frame(timeSeries$Date, timeSeries$Close)
colnames(x) <- c("Date", "Close")
x[['Date']] <- as.Date(x[['Date']])
x %>% group_by(Date=floor_date(Date, "month")) %>%
summarize(Total=Sum(Close), Count = n())
x$Average <- x$Close/x$Count
x <- merge.data.frame(timeSeries$Date, timeSeries$Close)
colnames(x) <- c("Date", "Close")
x[['Date']] <- as.Date(x[['Date']])
x %>% group_by(Date=floor_date(Date, "month")) %>%
summarize(Total=sum(Close), Count = n())
x$Average <- x$Close/x$Count
x$Average <- x$Total/x$Count
x
x <- merge.data.frame(timeSeries$Date, timeSeries$Close)
colnames(x) <- c("Date", "Close")
x[['Date']] <- as.Date(x[['Date']])
x <- x %>% group_by(Date=floor_date(Date, "month")) %>%
summarize(Total=sum(Close), Count = n())
x
library(quantmod)
getTimeSeries <- function(symbol) {
library(quantmod)
timeSeries <- getSymbols(symbol, src = "yahoo", from = (Sys.Date() - 365),
to = Sys.Date(),
auto.assign = FALSE)
colnames(timeSeries) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
return(timeSeries)
}
timeSeries <- getTimeSeries("0P000125KV.L")
timeSeries <- as.data.frame(timeSeries)
timeSeries$Date <- rownames(timeSeries)
timeSeries
library(quantmod)
getTimeSeries <- function(symbol) {
library(quantmod)
timeSeries <- getSymbols(symbol, src = "yahoo", from = (Sys.Date() - 365),
to = Sys.Date(),
auto.assign = FALSE,
periodicity = "monthly")
colnames(timeSeries) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
return(timeSeries)
}
timeSeries <- getTimeSeries("0P000125KV.L")
timeSeries <- as.data.frame(timeSeries)
timeSeries$Date <- rownames(timeSeries)
timeSeries
library(quantmod)
getTimeSeries <- function(symbol) {
library(quantmod)
timeSeries <- getSymbols(symbol, src = "yahoo", from = (Sys.Date() - 700),
to = Sys.Date(),
auto.assign = FALSE,
periodicity = "monthly")
colnames(timeSeries) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
return(timeSeries)
}
timeSeries <- getTimeSeries("0P000125KV.L")
timeSeries <- as.data.frame(timeSeries)
timeSeries$Date <- rownames(timeSeries)
timeSeries
library(dplyr)
library(lubridate)
x <- merge.data.frame(timeSeries$Date, timeSeries$Close)
colnames(x) <- c("Date", "Close")
calculateMacd <- function(timeSeries) {
macd <- MACD(timeSeries$Close)
macd <- as.data.frame(macd)
macd$date <- timeSeries$Date
return(macd)
}
macd <- calculateMacd(x)
macd
calculateMacd <- function(timeSeries) {
macd <- MACD(timeSeries$Close)
macd <- as.data.frame(macd)
#macd$date <- timeSeries$Date
return(macd)
}
macd <- calculateMacd(x)
macd
x <- merge.data.frame(timeSeries$Date, timeSeries$Close)
colnames(x) <- c("Date", "Close")
x
calculateMacd <- function(timeSeries) {
macd <- MACD(timeSeries$Close)
macd <- as.data.frame(macd)
macd$date <- timeSeries$Date
return(macd)
}
macd <- calculateMacd(timeSeries)
macd
timeSeries
calculateMacd <- function(timeSeries) {
macd <- MACD(timeSeries$Close)
macd <- as.data.frame(macd)
#macd$date <- timeSeries$Date
return(macd)
}
macd <- calculateMacd(timeSeries)
calculateMacd <- function(timeSeries) {
macd <- MACD(timeSeries$Close)
#macd <- as.data.frame(macd)
#macd$date <- timeSeries$Date
return(macd)
}
macd <- calculateMacd(timeSeries)
library(quantmod)
getTimeSeries <- function(symbol) {
library(quantmod)
timeSeries <- getSymbols(symbol, src = "yahoo", from = (Sys.Date() - 700),
to = Sys.Date(),
auto.assign = FALSE,
periodicity = "monthly")
colnames(timeSeries) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
return(timeSeries)
}
timeSeries <- getTimeSeries("0P000125KV.L")
timeSeries <- as.data.frame(timeSeries)
timeSeries$Date <- rownames(timeSeries)
timeSeries
library(dplyr)
library(lubridate)
x <- merge.data.frame(timeSeries$Date, timeSeries$Close)
colnames(x) <- c("Date", "Close")
x
calculateMacd <- function(timeSeries) {
macd <- MACD(timeSeries$Close)
#macd <- as.data.frame(macd)
#macd$date <- timeSeries$Date
return(macd)
}
macd <- calculateMacd(timeSeries)
macd
macd <- calculateMacd(timeSeries)
library(quantmod)
getTimeSeries <- function(symbol) {
library(quantmod)
timeSeries <- getSymbols(symbol, src = "yahoo", from = (Sys.Date() - 900),
to = Sys.Date(),
auto.assign = FALSE,
periodicity = "monthly")
colnames(timeSeries) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
return(timeSeries)
}
timeSeries <- getTimeSeries("0P000125KV.L")
timeSeries <- as.data.frame(timeSeries)
timeSeries$Date <- rownames(timeSeries)
timeSeries
library(dplyr)
library(lubridate)
x <- merge.data.frame(timeSeries$Date, timeSeries$Close)
colnames(x) <- c("Date", "Close")
x
calculateMacd <- function(timeSeries) {
macd <- MACD(timeSeries$Close)
#macd <- as.data.frame(macd)
#macd$date <- timeSeries$Date
return(macd)
}
macd <- calculateMacd(timeSeries)
library(quantmod)
getTimeSeries <- function(symbol) {
library(quantmod)
timeSeries <- getSymbols(symbol, src = "yahoo", from = (Sys.Date() - 750),
to = Sys.Date(),
auto.assign = FALSE,
periodicity = "monthly")
colnames(timeSeries) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
return(timeSeries)
}
timeSeries <- getTimeSeries("0P000125KV.L")
timeSeries <- as.data.frame(timeSeries)
timeSeries$Date <- rownames(timeSeries)
timeSeries
library(dplyr)
library(lubridate)
x <- merge.data.frame(timeSeries$Date, timeSeries$Close)
colnames(x) <- c("Date", "Close")
x
calculateMacd <- function(timeSeries) {
macd <- MACD(timeSeries$Close)
#macd <- as.data.frame(macd)
#macd$date <- timeSeries$Date
return(macd)
}
macd <- calculateMacd(timeSeries)
MACD(timeSeries$Close)
MACD(x$Close)
x
timeSeries
timeSeries$Date
timeSeries$Close
MACD(x$Open)
MACD(timeSeries$Open)
library(quantmod)
getTimeSeries <- function(symbol) {
library(quantmod)
timeSeries <- getSymbols(symbol, src = "yahoo", from = (Sys.Date() - 730),
to = Sys.Date(),
auto.assign = FALSE,
periodicity = "monthly")
colnames(timeSeries) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
return(timeSeries)
}
timeSeries <- getTimeSeries("0P000125KV.L")
timeSeries <- as.data.frame(timeSeries)
timeSeries$Date <- rownames(timeSeries)
timeSeries
library(dplyr)
library(lubridate)
calculateMacd <- function(timeSeries) {
macd <- MACD(timeSeries$Close)
#macd <- as.data.frame(macd)
#macd$date <- timeSeries$Date
return(macd)
}
MACD(timeSeries$Open)
timeSeries <- na.omit(timeSeries)
calculateMacd <- function(timeSeries) {
macd <- MACD(timeSeries$Close)
#macd <- as.data.frame(macd)
#macd$date <- timeSeries$Date
return(macd)
}
MACD(timeSeries$Open)
library(quantmod)
getTimeSeries <- function(symbol) {
library(quantmod)
timeSeries <- getSymbols(symbol, src = "yahoo", from = (Sys.Date() - 730),
to = Sys.Date(),
auto.assign = FALSE,
periodicity = "monthly")
colnames(timeSeries) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
return(timeSeries)
}
timeSeries <- getTimeSeries("^FTSE")
timeSeries <- as.data.frame(timeSeries)
timeSeries$Date <- rownames(timeSeries)
timeSeries <- na.omit(timeSeries)
library(dplyr)
library(lubridate)
calculateMacd <- function(timeSeries) {
macd <- MACD(timeSeries$Close)
#macd <- as.data.frame(macd)
#macd$date <- timeSeries$Date
return(macd)
}
MACD(timeSeries$Open)
macd <- calculateMacd(timeSeries)
library(quantmod)
getTimeSeries <- function(symbol) {
library(quantmod)
timeSeries <- getSymbols(symbol, src = "yahoo", from = (Sys.Date() - 180),
to = Sys.Date(),
auto.assign = FALSE,
#periodicity = "monthly"
)
colnames(timeSeries) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
return(timeSeries)
}
timeSeries <- getTimeSeries("^FTSE")
timeSeries <- as.data.frame(timeSeries)
timeSeries$Date <- rownames(timeSeries)
timeSeries <- na.omit(timeSeries)
library(dplyr)
library(lubridate)
calculateMacd <- function(timeSeries) {
macd <- MACD(timeSeries$Close)
#macd <- as.data.frame(macd)
#macd$date <- timeSeries$Date
return(macd)
}
MACD(timeSeries$Open)
macd <- calculateMacd(timeSeries)
library(quantmod)
getTimeSeries <- function(symbol) {
library(quantmod)
timeSeries <- getSymbols(symbol, src = "yahoo", from = (Sys.Date() - 180),
to = Sys.Date(),
auto.assign = FALSE,
#periodicity = "monthly"
)
colnames(timeSeries) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
return(timeSeries)
}
timeSeries <- getTimeSeries("^FTSE")
timeSeries <- as.data.frame(timeSeries)
timeSeries$Date <- rownames(timeSeries)
timeSeries <- na.omit(timeSeries)
library(dplyr)
library(lubridate)
calculateMacd <- function(timeSeries) {
macd <- MACD(timeSeries$Close)
macd <- as.data.frame(macd)
macd$date <- timeSeries$Date
return(macd)
}
MACD(timeSeries$Open)
macd <- calculateMacd(timeSeries)
macd <- na.omit(macd)
library(plotly)
fig <- plot_ly(macd, x = ~date, y = ~macd,
name = "MACD",
type = "bar"
)
fig <- fig %>% add_trace(y = ~signal, name = 'Signal')
fig
library(plotly)
fig <- plot_ly(macd, x = ~date, y = ~macd,
name = "MACD",
type = "scatter",
mode = "line"
)
fig <- fig %>% add_trace(y = ~signal, name = 'Signal',
mode = "line")
fig
timeSeries <- formatTimeSeries(timeSeries)
library(quantmod)
library(dplyr)
library(lubridate)
getTimeSeries <- function(symbol) {
library(quantmod)
timeSeries <- getSymbols(symbol, src = "yahoo", from = (Sys.Date() - 180),
to = Sys.Date(),
auto.assign = FALSE,
#periodicity = "monthly"
)
colnames(timeSeries) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
return(timeSeries)
}
formatTimeSeries <- function(timeSeries) {
timeSeries <- as.data.frame(timeSeries)
timeSeries$Date <- rownames(timeSeries)
timeSeries <- na.omit(timeSeries)
return(timeSeries)}
calculateMacd <- function(timeSeries) {
macd <- MACD(timeSeries$Close)
macd <- as.data.frame(macd)
macd$date <- timeSeries$Date
return(macd)
}
library(quantmod)
library(dplyr)
library(lubridate)
library(plotly)
getTimeSeries <- function(symbol) {
library(quantmod)
timeSeries <- getSymbols(symbol, src = "yahoo", from = (Sys.Date() - 180),
to = Sys.Date(),
auto.assign = FALSE,
#periodicity = "monthly"
)
colnames(timeSeries) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
return(timeSeries)
}
formatTimeSeries <- function(timeSeries) {
timeSeries <- as.data.frame(timeSeries)
timeSeries$Date <- rownames(timeSeries)
timeSeries <- na.omit(timeSeries)
return(timeSeries)}
calculateMacd <- function(timeSeries) {
macd <- MACD(timeSeries$Close)
macd <- as.data.frame(macd)
macd$date <- timeSeries$Date
macd <- na.omit(macd)
return(macd)
}
plotMacd <- function(macd) {
fig <- plot_ly(macd, x = ~date, y = ~macd,
name = "MACD",
type = "scatter",
mode = "line"
)
fig <- fig %>% add_trace(y = ~signal, name = 'Signal',
mode = "line")
fig
}
timeSeries <- getTimeSeries("^FTSE")
timeSeries <- formatTimeSeries(timeSeries)
macd <- calculateMacd(timeSeries)
plotMacd(macd)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('~/geo2rShinyApp')
usethis::use_description()
